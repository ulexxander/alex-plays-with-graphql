// Code generated by sqlc. DO NOT EDIT.
// source: queries.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
)

const countChatMembers = `-- name: CountChatMembers :one
SELECT COUNT(user_id) FROM members WHERE chat_id = $1
`

func (q *Queries) CountChatMembers(ctx context.Context, chatID uuid.UUID) (int64, error) {
	row := q.queryRow(ctx, q.countChatMembersStmt, countChatMembers, chatID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countChatMessages = `-- name: CountChatMessages :one
SELECT COUNT(message_id) FROM messages WHERE chat_id = $1
`

func (q *Queries) CountChatMessages(ctx context.Context, chatID uuid.UUID) (int64, error) {
	row := q.queryRow(ctx, q.countChatMessagesStmt, countChatMessages, chatID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUserMessages = `-- name: CountUserMessages :one
SELECT COUNT(message_id) FROM messages WHERE user_id = $1
`

func (q *Queries) CountUserMessages(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.queryRow(ctx, q.countUserMessagesStmt, countUserMessages, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createChat = `-- name: CreateChat :one
INSERT INTO chats (title)
VALUES ($1) RETURNING chat_id, title, date_created, date_updated
`

func (q *Queries) CreateChat(ctx context.Context, title string) (Chat, error) {
	row := q.queryRow(ctx, q.createChatStmt, createChat, title)
	var i Chat
	err := row.Scan(
		&i.ChatID,
		&i.Title,
		&i.DateCreated,
		&i.DateUpdated,
	)
	return i, err
}

const createChatMember = `-- name: CreateChatMember :exec
INSERT INTO members (user_id, chat_id)
VALUES ($1, $2)
`

type CreateChatMemberParams struct {
	UserID uuid.UUID
	ChatID uuid.UUID
}

func (q *Queries) CreateChatMember(ctx context.Context, arg CreateChatMemberParams) error {
	_, err := q.exec(ctx, q.createChatMemberStmt, createChatMember, arg.UserID, arg.ChatID)
	return err
}

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (user_id, chat_id, content)
VALUES ($1, $2, $3) RETURNING message_id, user_id, chat_id, content, date_created
`

type CreateMessageParams struct {
	UserID  uuid.UUID
	ChatID  uuid.UUID
	Content string
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.queryRow(ctx, q.createMessageStmt, createMessage, arg.UserID, arg.ChatID, arg.Content)
	var i Message
	err := row.Scan(
		&i.MessageID,
		&i.UserID,
		&i.ChatID,
		&i.Content,
		&i.DateCreated,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, password)
VALUES ($1, $2) RETURNING user_id, username, password, date_created, date_updated
`

type CreateUserParams struct {
	Username string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser, arg.Username, arg.Password)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.DateCreated,
		&i.DateUpdated,
	)
	return i, err
}

const getAllChats = `-- name: GetAllChats :many
SELECT chat_id, title, date_created, date_updated FROM chats
`

func (q *Queries) GetAllChats(ctx context.Context) ([]Chat, error) {
	rows, err := q.query(ctx, q.getAllChatsStmt, getAllChats)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Chat{}
	for rows.Next() {
		var i Chat
		if err := rows.Scan(
			&i.ChatID,
			&i.Title,
			&i.DateCreated,
			&i.DateUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllMessages = `-- name: GetAllMessages :many
SELECT message_id, user_id, chat_id, content, date_created FROM messages
`

func (q *Queries) GetAllMessages(ctx context.Context) ([]Message, error) {
	rows, err := q.query(ctx, q.getAllMessagesStmt, getAllMessages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.MessageID,
			&i.UserID,
			&i.ChatID,
			&i.Content,
			&i.DateCreated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT user_id, username, password, date_created, date_updated FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.query(ctx, q.getAllUsersStmt, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.Password,
			&i.DateCreated,
			&i.DateUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChatByID = `-- name: GetChatByID :one
SELECT chat_id, title, date_created, date_updated FROM chats WHERE chat_id = $1
`

func (q *Queries) GetChatByID(ctx context.Context, chatID uuid.UUID) (Chat, error) {
	row := q.queryRow(ctx, q.getChatByIDStmt, getChatByID, chatID)
	var i Chat
	err := row.Scan(
		&i.ChatID,
		&i.Title,
		&i.DateCreated,
		&i.DateUpdated,
	)
	return i, err
}

const getChatMembers = `-- name: GetChatMembers :many
SELECT users.user_id, users.username, users.password, users.date_created, users.date_updated FROM members
  INNER JOIN users
  ON members.user_id = users.user_id
WHERE chat_id = $1
`

func (q *Queries) GetChatMembers(ctx context.Context, chatID uuid.UUID) ([]User, error) {
	rows, err := q.query(ctx, q.getChatMembersStmt, getChatMembers, chatID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.Password,
			&i.DateCreated,
			&i.DateUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChatMessages = `-- name: GetChatMessages :many
SELECT message_id, user_id, chat_id, content, date_created FROM messages WHERE chat_id = $1
`

func (q *Queries) GetChatMessages(ctx context.Context, chatID uuid.UUID) ([]Message, error) {
	rows, err := q.query(ctx, q.getChatMessagesStmt, getChatMessages, chatID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.MessageID,
			&i.UserID,
			&i.ChatID,
			&i.Content,
			&i.DateCreated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByID = `-- name: GetUserByID :one
SELECT user_id, username, password, date_created, date_updated FROM users WHERE user_id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, userID uuid.UUID) (User, error) {
	row := q.queryRow(ctx, q.getUserByIDStmt, getUserByID, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.DateCreated,
		&i.DateUpdated,
	)
	return i, err
}
