// Code generated by sqlc. DO NOT EDIT.

package postgres

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.countChatMembersStmt, err = db.PrepareContext(ctx, countChatMembers); err != nil {
		return nil, fmt.Errorf("error preparing query CountChatMembers: %w", err)
	}
	if q.countChatMessagesStmt, err = db.PrepareContext(ctx, countChatMessages); err != nil {
		return nil, fmt.Errorf("error preparing query CountChatMessages: %w", err)
	}
	if q.countUserMessagesStmt, err = db.PrepareContext(ctx, countUserMessages); err != nil {
		return nil, fmt.Errorf("error preparing query CountUserMessages: %w", err)
	}
	if q.createChatStmt, err = db.PrepareContext(ctx, createChat); err != nil {
		return nil, fmt.Errorf("error preparing query CreateChat: %w", err)
	}
	if q.createChatMemberStmt, err = db.PrepareContext(ctx, createChatMember); err != nil {
		return nil, fmt.Errorf("error preparing query CreateChatMember: %w", err)
	}
	if q.createMessageStmt, err = db.PrepareContext(ctx, createMessage); err != nil {
		return nil, fmt.Errorf("error preparing query CreateMessage: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.getAllChatsStmt, err = db.PrepareContext(ctx, getAllChats); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllChats: %w", err)
	}
	if q.getAllMessagesStmt, err = db.PrepareContext(ctx, getAllMessages); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllMessages: %w", err)
	}
	if q.getAllUsersStmt, err = db.PrepareContext(ctx, getAllUsers); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllUsers: %w", err)
	}
	if q.getChatByIDStmt, err = db.PrepareContext(ctx, getChatByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetChatByID: %w", err)
	}
	if q.getChatMembersStmt, err = db.PrepareContext(ctx, getChatMembers); err != nil {
		return nil, fmt.Errorf("error preparing query GetChatMembers: %w", err)
	}
	if q.getChatMessagesStmt, err = db.PrepareContext(ctx, getChatMessages); err != nil {
		return nil, fmt.Errorf("error preparing query GetChatMessages: %w", err)
	}
	if q.getUserByIDStmt, err = db.PrepareContext(ctx, getUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByID: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.countChatMembersStmt != nil {
		if cerr := q.countChatMembersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countChatMembersStmt: %w", cerr)
		}
	}
	if q.countChatMessagesStmt != nil {
		if cerr := q.countChatMessagesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countChatMessagesStmt: %w", cerr)
		}
	}
	if q.countUserMessagesStmt != nil {
		if cerr := q.countUserMessagesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countUserMessagesStmt: %w", cerr)
		}
	}
	if q.createChatStmt != nil {
		if cerr := q.createChatStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createChatStmt: %w", cerr)
		}
	}
	if q.createChatMemberStmt != nil {
		if cerr := q.createChatMemberStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createChatMemberStmt: %w", cerr)
		}
	}
	if q.createMessageStmt != nil {
		if cerr := q.createMessageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createMessageStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.getAllChatsStmt != nil {
		if cerr := q.getAllChatsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllChatsStmt: %w", cerr)
		}
	}
	if q.getAllMessagesStmt != nil {
		if cerr := q.getAllMessagesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllMessagesStmt: %w", cerr)
		}
	}
	if q.getAllUsersStmt != nil {
		if cerr := q.getAllUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllUsersStmt: %w", cerr)
		}
	}
	if q.getChatByIDStmt != nil {
		if cerr := q.getChatByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getChatByIDStmt: %w", cerr)
		}
	}
	if q.getChatMembersStmt != nil {
		if cerr := q.getChatMembersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getChatMembersStmt: %w", cerr)
		}
	}
	if q.getChatMessagesStmt != nil {
		if cerr := q.getChatMessagesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getChatMessagesStmt: %w", cerr)
		}
	}
	if q.getUserByIDStmt != nil {
		if cerr := q.getUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIDStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                    DBTX
	tx                    *sql.Tx
	countChatMembersStmt  *sql.Stmt
	countChatMessagesStmt *sql.Stmt
	countUserMessagesStmt *sql.Stmt
	createChatStmt        *sql.Stmt
	createChatMemberStmt  *sql.Stmt
	createMessageStmt     *sql.Stmt
	createUserStmt        *sql.Stmt
	getAllChatsStmt       *sql.Stmt
	getAllMessagesStmt    *sql.Stmt
	getAllUsersStmt       *sql.Stmt
	getChatByIDStmt       *sql.Stmt
	getChatMembersStmt    *sql.Stmt
	getChatMessagesStmt   *sql.Stmt
	getUserByIDStmt       *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                    tx,
		tx:                    tx,
		countChatMembersStmt:  q.countChatMembersStmt,
		countChatMessagesStmt: q.countChatMessagesStmt,
		countUserMessagesStmt: q.countUserMessagesStmt,
		createChatStmt:        q.createChatStmt,
		createChatMemberStmt:  q.createChatMemberStmt,
		createMessageStmt:     q.createMessageStmt,
		createUserStmt:        q.createUserStmt,
		getAllChatsStmt:       q.getAllChatsStmt,
		getAllMessagesStmt:    q.getAllMessagesStmt,
		getAllUsersStmt:       q.getAllUsersStmt,
		getChatByIDStmt:       q.getChatByIDStmt,
		getChatMembersStmt:    q.getChatMembersStmt,
		getChatMessagesStmt:   q.getChatMessagesStmt,
		getUserByIDStmt:       q.getUserByIDStmt,
	}
}
